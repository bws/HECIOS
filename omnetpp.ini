# This file is shared by all PFS simulations

[General]
preload-ned-files = src/*/*.ned @INET/nedfiles.lst
sim-time-limit = 1000s

network = adenine

[Cmdenv]
express-mode = no

[Tkenv]
default-run=1

[Parameters]

###############################################################################
#
# Settings for the adenine network configuration
#
###############################################################################
# Cluster size configuration
adenine.numCPUNodes = 8
adenine.numIONodes = 2


###############################################################################
#
# Settings for the client/end user application
#
#   Note that in the trace file, "%r" will be replaced with the applications
#   process rank.
#
###############################################################################
**.mpi.app.traceFile = "../traces/cholesky.proc.%r.trace"
**.mpi.app.numTraceProcs = 8


###############################################################################
#
# Adenine INET component configuration
#
###############################################################################
# We should set this to something like a Foundry FESX448
adenine.switch.relayUnitType = "MACRelayUnitPP"
adenine.switch.relayUnit.addressTableFile = ""
adenine.switch.relayUnit.addressTableSize = 100000
adenine.switch.relayUnit.agingTime = 0
adenine.switch.relayUnit.processingTime = 0
adenine.switch.relayUnit.bufferSize = 64000
adenine.switch.relayUnit.highWatermark = 100000
adenine.switch.relayUnit.pauseUnits = 0
adenine.switch.relayUnit.writeScalars = false
adenine.switch.mac[*].address = "auto"
adenine.switch.mac[*].txrate = 136000000000
adenine.switch.mac[*].duplexEnabled = true
adenine.switch.mac[*].writeScalars = false

# We should set this to something like an Intel Pro/1000 PT
#
# RX Ring Length: 256  TX Ring Length: 128
#
adenine.**.eth[*].queueType = "DropTailQueue"
adenine.**.eth[*].queue.frameCapacity = 256
adenine.**.eth[*].mac.promiscuous = false
adenine.**.eth[*].mac.address = "auto"
adenine.**.eth[*].mac.txrate = 1000000000
adenine.**.eth[*].mac.duplexEnabled = true
adenine.**.eth[*].mac.txQueueLimit = 128
adenine.**.eth[*].mac.queueModule = ""
adenine.**.eth[*].mac.writeScalars = false
adenine.**.eth[*].encap.writeScalars = false
adenine.**.ppp[*].queueType = "DropTailQueue"
adenine.**.ppp[*].queue.frameCapacity = 0

# Various INET configuration settings
adenine.**.hca.namid = -1
adenine.**.hca.routingFile = ""
adenine.**.hca.routingFile = ""
adenine.**.hca.IPForward = 0
adenine.**.hca.networkLayer.arp.retryTimeout = 1
adenine.**.hca.networkLayer.arp.retryCount = 3
adenine.**.hca.networkLayer.arp.cacheTimeout = 100
adenine.**.hca.networkLayer.ip.procDelay = 10us
adenine.**.hca.networkLayer.proxyARP = false


###############################################################################
#
# Settings for BMI TCP connections
#
###############################################################################
**.hca.tcpApp[*].listenPort = 6000
**.hca.tcpApp[*].connectPort = 6000

# tcp settings
**.tcp.recordStats = 0
**.tcp.mss = 512 # bytes
**.tcp.advertisedWindow= 109568 # =64 MSSs

# Ahmet's notes on TCP:
# 1. Delayed ACKs disabled by default, i.e. every segment received
#    by the receiver triggers an ACK.
# 2. If TCP runs "message mode", that is, with
#    MsgBasedSendQueue/RcvQueue configured in omnetpp.ini,  app
#    sends a 100MB cMessage over TCP, it'll be only passed up to the 
#    app on the receiver side when all 100MB has arrived. In contrast, with
#    VirtualBytesSendQueue/RcvQueue any data gets passed up immediately 
#    to the app (as a blank cMessage with the length set).
**.tcp.tcpAlgorithmClass="TCPReno"
**.tcp.sendQueueClass="TCPVirtualDataSendQueue"
#**.tcp.sendQueueClass="TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass="TCPVirtualDataRcvQueue"
#**.tcp.receiveQueueClass="TCPMsgBasedRcvQueue"


##############################################################################
# UDP Applications
**.numUdpApps=0 # 0 means no UDP apps active.
**.udpAppType="UDPBasicApp"

# Ping Application
# If you don't specify a dest. address, ping app won't start (remains off).
**.pingApp.destAddr="" 
**.pingApp.srcAddr=""
**.pingApp.packetSize=56
**.pingApp.interval=1
**.pingApp.hopLimit=32
**.pingApp.count=0
**.pingApp.startTime=1
**.pingApp.stopTime=0
**.pingApp.printPing=false

# TCP Applications
# Sender establishes a connection to the receiver and uploads
# a file of 100 MBytes.
#**.cpun[0].hca.numTcpApps=1  # 0 means no TCP sender apps active.
#**.cpun[0].hca.tcpAppType="TCPSessionApp"
#**.cpun[0].hca.tcpApp[0].active=true
#**.cpun[0].hca.tcpApp[0].address=""
#**.cpun[0].hca.tcpApp[0].port=-1
#**.cpun[0].hca.tcpApp[0].connectAddress="ion[1]"
#**.cpun[0].hca.tcpApp[0].connectPort=1000
#**.cpun[0].hca.tcpApp[0].tOpen=exponential(0.1)
#**.cpun[0].hca.tcpApp[0].tSend=0
#**.cpun[0].hca.tcpApp[0].sendBytes=100000000  # 100 MBytes
#**.cpun[0].hca.tcpApp[0].sendScript=""
#**.cpun[0].hca.tcpApp[0].tClose=0
#
#**.ion[*].hca.numTcpApps=1
#**.ion[*].hca.tcpAppType="TCPSinkApp"
#**.ion[*].hca.tcpApp[0].address=""
#**.ion[*].hca.tcpApp[0].port=1000
#
#**.cpun[*].hca.numTcpApps=1
#**.cpun[*].hca.tcpAppType="TCPSinkApp"
#**.cpun[*].hca.tcpApp[0].address=""
#**.cpun[*].hca.tcpApp[0].port=1000
