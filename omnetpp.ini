# This file is shared by all PFS simulations
[General]
# You need to modify the following entry to point it to the correct 
# location of the file "nedfiles.lst" in your INET installation.
preload-ned-files = src/*.ned @INET/nedfiles.lst
sim-time-limit = 8s

network = test_cluster

[Cmdenv]
express-mode = no

[Tkenv]
default-run=1

[Parameters]
# NAM trace
**.namid = -1

#
# test_cluster Settings
#
# 
test_cluster.num_cpu_nodes = 4
test_cluster.num_io_nodes = 4

test_cluster.switch.relayUnitType = "MACRelayUnitPP"
test_cluster.switch.relayUnit.addressTableFile = ""
test_cluster.switch.relayUnit.addressTableSize = 100000
test_cluster.switch.relayUnit.agingTime = 0
test_cluster.switch.relayUnit.processingTime = 0
test_cluster.switch.relayUnit.bufferSize = 64000
test_cluster.switch.relayUnit.highWatermark = 100000
test_cluster.switch.relayUnit.pauseUnits = 0
test_cluster.switch.relayUnit.writeScalars = false
test_cluster.switch.mac[*].address = "auto"
test_cluster.switch.mac[*].txrate = 136000000000
test_cluster.switch.mac[*].duplexEnabled = true
test_cluster.switch.mac[*].writeScalars = false

test_cluster.cpun[*].eth[*].queueType = "DropTailQueue"
test_cluster.cpun[*].eth[*].queue.frameCapacity = 60
test_cluster.cpun[*].eth[*].mac.promiscuous = false
test_cluster.cpun[*].eth[*].mac.address = "auto"
test_cluster.cpun[*].eth[*].mac.txrate = 1000000000
test_cluster.cpun[*].eth[*].mac.duplexEnabled = true
test_cluster.cpun[*].eth[*].mac.txQueueLimit = 60
test_cluster.cpun[*].eth[*].mac.queueModule = ""
test_cluster.cpun[*].eth[*].mac.writeScalars = false
test_cluster.cpun[*].eth[*].encap.writeScalars = false

test_cluster.ion[*].eth[*].queueType = "DropTailQueue"
test_cluster.ion[*].eth[*].queue.frameCapacity = 60
test_cluster.ion[*].eth[*].mac.promiscuous = true
test_cluster.ion[*].eth[*].mac.address = "auto"
test_cluster.ion[*].eth[*].mac.txrate = 1000000000
test_cluster.ion[*].eth[*].mac.duplexEnabled = true
test_cluster.ion[*].eth[*].mac.txQueueLimit = 60
test_cluster.ion[*].eth[*].mac.queueModule = ""
test_cluster.ion[*].eth[*].mac.writeScalars = false
test_cluster.ion[*].eth[*].encap.writeScalars = false

#
# Cluster configuration
#
beowulf_net.num_cpu_nodes = 4
beowulf_net.num_io_nodes = 4

# UDP Applications
**.numUdpApps=0 # 0 means no UDP apps active.
**.udpAppType="UDPBasicApp"

# Ping Application
# If you don't specify a dest. address, ping app won't start (remains off).
**.cpun[0].pingApp.destAddr="ion[1]" 
**.pingApp.destAddr="" # will prevent receiver's ping app to send anything.
**.pingApp.srcAddr=""
**.pingApp.packetSize=56
**.pingApp.interval=1
**.pingApp.hopLimit=32
**.pingApp.count=0
**.pingApp.startTime=1
**.pingApp.stopTime=0
**.pingApp.printPing=true

# TCP Applications
# Sender establishes a connection to the receiver and uploads
# a file of 100 MBytes.
**.cpun[0].numTcpApps=1  # 0 means no TCP sender apps active.
**.cpun[0].tcpAppType="TCPSessionApp"
**.cpun[0].tcpApp[0].active=true
**.cpun[0].tcpApp[0].address=""
**.cpun[0].tcpApp[0].port=-1
**.cpun[0].tcpApp[0].connectAddress="ion[1]"
**.cpun[0].tcpApp[0].connectPort=1000
**.cpun[0].tcpApp[0].tOpen=exponential(0.1)
**.cpun[0].tcpApp[0].tSend=0
**.cpun[0].tcpApp[0].sendBytes=100000000  # 100 MBytes
**.cpun[0].tcpApp[0].sendScript=""
**.cpun[0].tcpApp[0].tClose=0

**.ion[*].numTcpApps=1
**.ion[*].tcpAppType="TCPSinkApp"
**.ion[*].tcpApp[0].address=""
**.ion[*].tcpApp[0].port=1000

**.cpun[*].numTcpApps=1
**.cpun[*].tcpAppType="TCPSinkApp"
**.cpun[*].tcpApp[0].address=""
**.cpun[*].tcpApp[0].port=1000

# tcp settings
**.tcp.recordStats=1
**.tcp.mss=1024 # bytes
**.tcp.advertisedWindow= 65536 # =64 MSSs

# Ahmet's notes on TCP:
# 1. Delayed ACKs disabled by default, i.e. every segment received
#    by the receiver triggers an ACK.
# 2. If TCP runs "message mode", that is, with
#    MsgBasedSendQueue/RcvQueue configured in omnetpp.ini,  app
#    sends a 100MB cMessage over TCP, it'll be only passed up to the 
#    app on the receiver side when all 100MB has arrived. In contrast, with
#    VirtualBytesSendQueue/RcvQueue any data gets passed up immediately 
#    to the app (as a blank cMessage with the length set).
**.tcp.sendQueueClass="TCPVirtualDataSendQueue"
#**.tcp.sendQueueClass="TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass="TCPVirtualDataRcvQueue"
#**.tcp.receiveQueueClass="TCPMsgBasedRcvQueue"
**.tcp.tcpAlgorithmClass="TCPReno"


# IP settings
**.routingFile=""
**.ip.procDelay=10us
**.cpun[*].IPForward=false     # Sender and receiver are not routers
**.ion[*].IPForward=false   #

# ARP configuration
**.arp.retryTimeout = 1
**.arp.retryCount = 3
**.arp.cacheTimeout = 100
**.networkLayer.proxyARP = true  # Host's is hardwired "false"

# NIC configuration in hosts and routers 
**.ppp[*].queueType = "DropTailQueue" 
**.cpun[*].ppp[*].queue.frameCapacity   = 60    # packets
**.ion[*].ppp[*].queue.frameCapacity = 60    # packets
**.router.ppp[*].queue.frameCapacity   = 6    # packets
