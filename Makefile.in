#
# Top Level Makefile for HECIOS.  This makefile avoids recursive make and 
# integrates the third party framework, INET, into HECIOS.
#

#
# System paths
#
HECIOS_DIR := $(shell pwd)
OMNET_DIR := @OMNET_DIR@

#
# Module locations
#
BIN_DIR = bin
DOC_DIR = doc
SRC_DIR = src
INET_DIR = INET
CLIENT_DIR= $(SRC_DIR)/client
COMMON_DIR= $(SRC_DIR)/common
MESSAGES_DIR= $(SRC_DIR)/messages
OS_DIR= $(SRC_DIR)/os
PHYSICAL_DIR= $(SRC_DIR)/physical
SERVER_DIR= $(SRC_DIR)/server

#
# Master Makefile default targets
#
ALL_TARGETS = $(BIN_DIR)/hecios
all: $(ALL_TARGETS)


#
# Include path (directories to search for include files)
#
INCLUDES = $(OMNET_DIR)/include \
	$(HECIOS_DIR) \
        $(CLIENT_DIR) \
        $(COMMON_DIR) \
        $(MESSAGES_DIR) \
        $(OS_DIR) \
        $(PHYSICAL_DIR) \
        $(SERVER_DIR) \
        $(INET_DIR) \
        $(INET_DIR)/Applications/Ethernet \
        $(INET_DIR)/Applications/Generic \
        $(INET_DIR)/Applications/PingApp \
        $(INET_DIR)/Applications/TCPApp \
        $(INET_DIR)/Applications/UDPApp \
        $(INET_DIR)/Base \
        $(INET_DIR)/Network/ARP \
        $(INET_DIR)/Network/AutoRouting \
        $(INET_DIR)/Network/Contract \
        $(INET_DIR)/Network/IPv4 \
        $(INET_DIR)/Network/Queue \
	$(INET_DIR)/NetworkInterfaces/Contract \
	$(INET_DIR)/NetworkInterfaces/EtherSwitch \
	$(INET_DIR)/NetworkInterfaces/Ethernet \
	$(INET_DIR)/NetworkInterfaces/PPP \
        $(INET_DIR)/Nodes/INET \
        $(INET_DIR)/Transport/Contract \
        $(INET_DIR)/Transport/TCP \
        $(INET_DIR)/Transport/UDP \
        $(INET_DIR)/Util

#
# Libraries to link
#
LIB_DIR = lib

OMNET_SIM_LIBS = -lsim_std -lnedxml -lxml2

OMNET_GUI_LIBS = -lenvir -ltkenv -ltk -ltcl

OMNET_CMD_LIBS = -lenvir -lcmdenv

LIBS_GUI = -L$(OMNET_DIR)/lib -L$(LIB_DIR) \
        $(OMNET_GUI_LIBS) $(OMNET_SIM_LIBS) -ldl -lstdc++

LIBS_CMD = -L$(OMNET_DIR)/lib -L$(LIB_DIR) \
	$(OMNET_CMD_LIBS) $(OMNET_SIM_LIBS) -ldl -lstdc++

#
# Variables used by the individual modules
#
DOC_SRC :=
SIM_SRC :=

#
# Include module makefiles
#
include mf/inet.mk
include $(DOC_DIR)/module.mk
include $(CLIENT_DIR)/module.mk
include $(COMMON_DIR)/module.mk
include $(MESSAGES_DIR)/module.mk
include $(OS_DIR)/module.mk
include $(PHYSICAL_DIR)/module.mk
include $(SERVER_DIR)/module.mk

#
# Doc Module build targets
#
DOC_DVI := $(patsubst %.tex,%.dvi, $(filter %.tex,$(DOC_SRC)))
DOC_PDF := $(patsubst %.tex,%.pdf, $(filter %.tex,$(DOC_SRC)))
DOC_PS := $(patsubst %.tex,%.ps, $(filter %.tex,$(DOC_SRC)))
DOC_EPS := $(patsubst %.fig,%.eps, $(filter %.fig,$(DOC_SRC)))

#
# Latex creates a bunch of spurious files, add those to clean list
#
DOC_CRUFT := $(patsubst %.tex,%.aux, $(filter %.tex,$(DOC_SRC)))
DOC_CRUFT += $(patsubst %.tex,%.toc, $(filter %.tex,$(DOC_SRC)))
DOC_CRUFT += $(patsubst %.tex,%.log, $(filter %.tex,$(DOC_SRC)))

#
# Src Module build targets
#
SIM_MSG_OUTPUT := $(patsubst %.msg,%_m.cc, $(filter %.msg, $(SIM_SRC)))
SIM_MSG_OBJS := $(patsubst %.msg,%_m.o, $(filter %.msg, $(SIM_SRC)))
SIM_NED_OUTPUT := $(patsubst %.ned,%_n.cc, $(filter %.ned, $(SIM_SRC)))
SIM_NED_OBJS := $(patsubst %.ned,%_n.o, $(filter %.ned, $(SIM_SRC)))
SIM_OBJS := $(patsubst %.cc, %.o, $(filter %.cc, $(SIM_SRC)))

#
# Source code dependency generation
#
SIM_DEPENDS := $(patsubst %.cc, %.d, $(filter %.cc, $(SIM_SRC)))

#
# Include dependency makefiles if building source target
#
ifeq ($(filter all_clean clean doc ned_clean tests_clean, $(MAKECMDGOALS)), )
-include $(SIM_DEPENDS)
endif

#
# Testing macros
#
TEST_DIR := tests

TEST_COMMON_DIR := $(TEST_DIR)/common
TEST_SUPPORT_DIR := $(TEST_DIR)/support
TEST_CLIENT_DIR := $(TEST_DIR)/client

TEST_INCLUDES := -I$(TEST_COMMON_DIR)

TEST_LIBS := -L$(OMNET_DIR)/lib -L$(LIB_DIR) \
	-lsim_std -lnedxml -lxml2 \
	-lcppunit -ldl

#
# Testing module includes
#
SIM_TEST_SRC :=
include $(TEST_CLIENT_DIR)/module.mk
include $(TEST_COMMON_DIR)/module.mk
include $(TEST_SUPPORT_DIR)/module.mk


#
# Testing dependencies
#
SIM_TEST_DEPENDS := $(patsubst %.cc, %.d, $(filter %.cc, $(SIM_TEST_SRC)))
ifeq ($(filter test, $(MAKECMDGOALS)), test)
-include $(SIM_TEST_DEPENDS)
endif

#
# Derived files for tests
#
SIM_TEST_OBJS := $(patsubst %.cc, %.o, $(filter %.cc, $(SIM_TEST_SRC)))


#
# Include all make system makefiles
#
include mf/rules.mk
include mf/tools.mk


#
# Top level psuedo targets
#
gui: $(BIN_DIR)/hecios_gui

clean:
	@echo "Removing all derived files."
	$(RM) $(DOC_DVI) $(DOC_EPS) $(DOC_PDF) $(DOC_PS) $(DOC_CRUFT)
	$(RM) $(SIM_DEPENDS)
	$(RM) $(SIM_NED_OUTPUT) $(SIM_NED_OBJS) 
	$(RM) $(SIM_MSG_OUTPUT) $(SIM_MSG_OBJS)
	$(RM) $(SIM_OBJS)
	@echo "Derived files deleted.  Project is clean."

ned_clean:
	@echo "Removing generated source files and objects."
	$(RM) $(SIM_NED_OUTPUT) $(SIM_NED_OBJS)
	$(RM) $(SIM_MSG_OUTPUT) $(SIM_MSG_OBJS)
	@echo "Generated source files and objects removed."

tests_clean:
	@echo "Removing test subsytem derived objects."
	$(RM) $(SIM_TEST_OBJS)
	$(RM) $(SIM_TEST_DEPENDS)
	@echo "Derived files deleted."

all_clean: clean tests_clean inet_clean

#
# Build targets for documentation
#
doc: $(DOC_EPS) $(DOC_PDF)
	@#echo "DOC_PDF: $(DOC_PDF) DOC_DIR: $(DOC_DIR)"
	doxygen $(DOC_DIR)/Doxyfile
	doxytag -t $(DOC_DIR)/Doxytag.xml $(DOC_DIR)/api-doc/html
	opp_neddoc -d ../api-doc/html -t $(DOC_DIR)/Doxytag.xml -o $(DOC_DIR)/ned-doc $(SRC_DIR)

#
# Build unit test drivers
#
test: $(BIN_DIR)/common_test $(BIN_DIR)/client_test

#
# Targets to build HECIOS simulator (gui and command line versions)
#
$(SIM_MSG_OUTPUT): $(THIRDPARTY_LIBS)

$(SIM_OBJS): $(SIM_MSG_OUTPUT)

$(BIN_DIR)/hecios: lib/inet.o $(SIM_MSG_OBJS) $(SIM_OBJS) 
	@mkdir -p $(BIN_DIR)
	$(LD) $(LDFLAGS) $(SIM_MSG_OBJS) $(SIM_OBJS) lib/inet.o $(LIBS_GUI) -o $@

$(BIN_DIR)/hecios_cmd: lib/inet.o $(SIM_MSG_OBJS) $(SIM_OBJS)
	@mkdir -p $(BIN_DIR)
	$(LD) $(LDFLAGS) $(SIM_MSG_OBJS) $(SIM_OBJS) lib/inet.o $(LIBS_CMD) -o $@

#
# common module unit tests
#
COMMON_TEST_OBJS = $(TEST_COMMON_DIR)/unit_test.o \
	$(TEST_SUPPORT_DIR)/test_cenvir.o

$(BIN_DIR)/common_test: $(COMMON_TEST_OBJS) $(SIM_MSG_OBJS) $(SIM_OBJS) lib/inet.o
	@mkdir -p $(BIN_DIR)
	$(LD) -g $(TEST_INCLUDES) $(SIM_MSG_OBJS) $(SIM_OBJS) $(COMMON_TEST_OBJS) lib/inet.o $(TEST_LIBS) -o $@

#
# client module unit tests
#
CLIENT_TEST_OBJS = $(TEST_CLIENT_DIR)/unit_test.o \
	$(TEST_SUPPORT_DIR)/test_cenvir.o

$(BIN_DIR)/client_test: $(CLIENT_TEST_OBJS) $(SIM_MSG_OBJS) $(SIM_OBJS) lib/inet.o
	@mkdir -p $(BIN_DIR)
	$(LD) -g $(TEST_INCLUDES) $(SIM_MSG_OBJS) $(SIM_OBJS) $(CLIENT_TEST_OBJS) lib/inet.o $(TEST_LIBS) -o $@

#
# Psuedotargets (required by make for some dependencies)
#
.PHONY: all all_clean clean doc gui ned_clean test tests_clean
