#
# This file is part of Hecios
#
# Copyright (C) 2007 Brad Settlemyer
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

#
# Top Level Makefile for HECIOS.  This makefile avoids recursive make and 
# integrates the third party framework, INET, into HECIOS.
#

#
# Variables set by the configure script
#
HECIOS_DIR := @CONFIG_PROJECT_DIR@
BUILD_DIR := @CONFIG_BUILD_DIR@
INSTALL_DIR = ${HOME}/software/hecios
OMNET_DIR := @OMNET_DIR@
CONFIG_CXXFLAGS := @CONFIG_CXXFLAGS@
CONFIG_UNSAFE_CXXFLAGS := @CONFIG_UNSAFE_CXXFLAGS@
CONFIG_LDFLAGS := @CONFIG_LDFLAGS@

#
# Module locations
#
DOC_DIR = doc
SRC_DIR = src
INET_DIR = INET
CLIENT_DIR= $(SRC_DIR)/client
COMMON_DIR= $(SRC_DIR)/common
CONFIG_DIR= $(SRC_DIR)/config
IO_DIR= $(SRC_DIR)/io
LAYOUT_DIR= $(SRC_DIR)/layout
MESSAGES_DIR= $(SRC_DIR)/messages
OS_DIR= $(SRC_DIR)/os
PHYSICAL_DIR= $(SRC_DIR)/physical
SERVER_DIR= $(SRC_DIR)/server

#
# Build target directories
#
BIN_DIR = bin
LIB_DIR = lib

#
# Set the VPATH to enable out of tree builds
#
VPATH = $(HECIOS_DIR)

#
# Master Makefile default targets
#
DEFAULT_TARGETS = $(BIN_DIR)/hecios_cmd $(BUILD_DIR)/omnetpp.ini
default: $(DEFAULT_TARGETS)


#
# Include path (directories to search for include files)
#
INCLUDES = $(OMNET_DIR)/include \
	$(HECIOS_DIR) \
        $(CLIENT_DIR) \
        $(COMMON_DIR) \
        $(CONFIG_DIR) \
        $(IO_DIR) \
        $(LAYOUT_DIR) \
        $(MESSAGES_DIR) \
        $(OS_DIR) \
        $(PHYSICAL_DIR) \
        $(SERVER_DIR) \
        $(INET_DIR) \
        $(INET_DIR)/Applications/Ethernet \
        $(INET_DIR)/Applications/Generic \
        $(INET_DIR)/Applications/PingApp \
        $(INET_DIR)/Applications/TCPApp \
        $(INET_DIR)/Applications/UDPApp \
        $(INET_DIR)/Base \
        $(INET_DIR)/Network/ARP \
        $(INET_DIR)/Network/AutoRouting \
        $(INET_DIR)/Network/Contract \
        $(INET_DIR)/Network/IPv4 \
        $(INET_DIR)/Network/Queue \
	$(INET_DIR)/NetworkInterfaces/Contract \
	$(INET_DIR)/NetworkInterfaces/EtherSwitch \
	$(INET_DIR)/NetworkInterfaces/Ethernet \
	$(INET_DIR)/NetworkInterfaces/PPP \
        $(INET_DIR)/Nodes/INET \
        $(INET_DIR)/Transport/Contract \
        $(INET_DIR)/Transport/TCP \
        $(INET_DIR)/Transport/UDP \
        $(INET_DIR)/Util

#
# Testing subsystem include files.  Setup in tests.mk, but referenced here
# so that it can be used
#
TEST_INCLUDES =

#
# Libraries to link
#
LIB_DIR = lib

OMNET_SIM_LIBS = -lsim_std -lnedxml -lxml2

OMNET_GUI_LIBS = -lenvir -ltkenv -ltk -ltcl

OMNET_CMD_LIBS = -lenvir -lcmdenv

LIBS_GUI = -L$(OMNET_DIR)/lib -L$(LIB_DIR) \
        $(OMNET_GUI_LIBS) $(OMNET_SIM_LIBS) -ldl -lstdc++

LIBS_CMD = -L$(OMNET_DIR)/lib -L$(LIB_DIR) \
	$(OMNET_CMD_LIBS) $(OMNET_SIM_LIBS) -ldl -lstdc++

#
# Variables used by the individual modules
#
DOC_SRC :=
SIM_SRC :=

#
# Include module makefiles
#
include $(HECIOS_DIR)/mf/inet.mk
include $(DOC_DIR)/module.mk
include $(CLIENT_DIR)/module.mk
include $(COMMON_DIR)/module.mk
include $(CONFIG_DIR)/module.mk
include $(IO_DIR)/module.mk
include $(LAYOUT_DIR)/module.mk
include $(MESSAGES_DIR)/module.mk
include $(OS_DIR)/module.mk
include $(PHYSICAL_DIR)/module.mk
include $(SERVER_DIR)/module.mk

#
# Doc Module build targets
#
DOC_DVI := $(patsubst %.tex,%.dvi, $(filter %.tex,$(DOC_SRC)))
DOC_PDF := $(patsubst %.tex,%.pdf, $(filter %.tex,$(DOC_SRC)))
DOC_PS := $(patsubst %.tex,%.ps, $(filter %.tex,$(DOC_SRC)))
DOC_EPS := $(patsubst %.fig,%.eps, $(filter %.fig,$(DOC_SRC)))

#
# Latex creates a bunch of spurious files, add those to clean list
#
DOC_CRUFT := $(patsubst %.tex,%.aux, $(filter %.tex,$(DOC_SRC)))
DOC_CRUFT += $(patsubst %.tex,%.toc, $(filter %.tex,$(DOC_SRC)))
DOC_CRUFT += $(patsubst %.tex,%.log, $(filter %.tex,$(DOC_SRC)))

#
# Src Module build targets
#
SIM_MSG_OUTPUT := $(patsubst %.msg,%_m.cc, $(filter %.msg, $(SIM_SRC)))
SIM_MSG_OBJS := $(patsubst %.msg,%_m.o, $(filter %.msg, $(SIM_SRC)))
SIM_NED_OUTPUT := $(patsubst %.ned,%_n.cc, $(filter %.ned, $(SIM_SRC)))
SIM_NED_OBJS := $(patsubst %.ned,%_n.o, $(filter %.ned, $(SIM_SRC)))
SIM_OBJS := $(patsubst %.cc, %.o, $(filter %.cc, $(SIM_SRC)))

#
# Source code dependency generation
#
SIM_DEPENDS := $(patsubst %.cc, %.d, $(filter %.cc, $(SIM_SRC)))

#
# Include dependency makefiles if building source target
#
DEPFILTER_MAKECMDGOALS := $(filter %clean %doc, $(MAKECMDGOALS))
ifeq ($(strip $(DEPFILTER_MAKECMDGOALS)),)
-include $(SIM_DEPENDS)
endif

#
# Include all make system makefiles
#
include $(HECIOS_DIR)/mf/rules.mk
include $(HECIOS_DIR)/mf/tools.mk
include $(HECIOS_DIR)/mf/tests.mk

#
# Top level psuedo targets
#
all: $(BIN_DIR)/hecios_cmd $(BIN_DIR)/hecios $(BUILD_DIR)/omnetpp.ini

gui: $(BIN_DIR)/hecios $(BUILD_DIR)/omnetpp.ini

clean:
	@echo "Removing all derived files."
	$(RM) $(DOC_DVI) $(DOC_EPS) $(DOC_PDF) $(DOC_PS) $(DOC_CRUFT)
	$(RM) $(SIM_DEPENDS)
	$(RM) $(SIM_NED_OUTPUT) $(SIM_NED_OBJS) 
	$(RM) $(SIM_MSG_OUTPUT) $(SIM_MSG_OBJS)
	$(RM) $(SIM_OBJS)
	$(RM) $(BIN_DIR)/hecios $(BIN_DIR)/hecios_cmd $(BUILD_DIR)/omnetpp.ini
	@echo "Derived files deleted.  Project is clean."

depclean:
	$(RM) $(SIM_DEPENDS)

gen_clean:
	@echo "Removing generated source files and objects."
	$(RM) $(SIM_NED_OUTPUT) $(SIM_NED_OBJS)
	$(RM) $(SIM_MSG_OUTPUT) $(SIM_MSG_OBJS)
	@echo "Generated source files and objects removed."

all_clean: clean inet_clean tests_clean


#
# Build targets for software installation
#
install:
	$(INSTALL) -d $(INSTALL_DIR)/bin
	$(INSTALL) -d $(INSTALL_DIR)/examples
	$(INSTALL) -d $(INSTALL_DIR)/lib/ned
	$(INSTALL) -c bin/hecios* $(INSTALL_DIR)/bin
	$(INSTALL) -c lib/*.* $(INSTALL_DIR)/lib
	$(INSTALL) -c ini/*.ini $(INSTALL_DIR)/examples
	find . -name *.ned -exec $(INSTALL) -c {} $(INSTALL_DIR)/lib/ned \;
	find $(INSTALL_DIR) -name *.ned > $(INSTALL_DIR)/lib/ned/hecios_ned.lst
	sed -e "s|@NEDINCLUDES@|@$(INSTALL_DIR)/lib/ned/hecios_ned.lst|" \
            $(HECIOS_DIR)/omnetpp.ini.in > $(INSTALL_DIR)/examples/example.ini
	@echo "HECIOS successfully installed."

.PHONY: install

#
# Build targets for documentation
#
doc: $(DOC_EPS) $(DOC_PDF)
	@#echo "DOC_PDF: $(DOC_PDF) DOC_DIR: $(DOC_DIR)"
	doxygen $(DOC_DIR)/Doxyfile
	doxytag -t $(DOC_DIR)/Doxytag.xml $(DOC_DIR)/api-doc/html
	opp_neddoc -d ../api-doc/html -t $(DOC_DIR)/Doxytag.xml -o $(DOC_DIR)/ned-doc $(SRC_DIR)

.PHONY: doc

#
# Build the Omnet configuration information
#
$(BUILD_DIR)/hecios_ned.lst:
	find $(HECIOS_DIR) -name *.ned > $@

$(BUILD_DIR)/omnetpp.ini: $(BUILD_DIR)/hecios_ned.lst $(HECIOS_DIR)/omnetpp.ini.in
	sed -e "s|@NEDINCLUDES@|@$(BUILD_DIR)/hecios_ned.lst|" $(HECIOS_DIR)/omnetpp.ini.in > $@

configfile: $(BUILD_DIR)/omnetpp.ini

.PHONY: configfile

#
# Incremental build (useful target for IDE auto-save builds)
#
incremental: $(LIB_DIR)/inet.o $(SIM_MSG_OBJS) $(SIM_OBJS) tests_incremental

.PHONY: incremental

#
# Targets to build HECIOS simulator (gui and command line versions)
#
$(SIM_MSG_OUTPUT): $(LIB_DIR)/inet.o

$(SIM_OBJS): $(SIM_MSG_OUTPUT)

$(BIN_DIR)/hecios: $(LIB_DIR)/inet.o $(SIM_MSG_OBJS) $(SIM_OBJS) 
	@mkdir -p $(BIN_DIR)
	$(LD) $(LDFLAGS) $(SIM_MSG_OBJS) $(SIM_OBJS) $(LIB_DIR)/inet.o $(LIBS_GUI) -o $@

$(BIN_DIR)/hecios_cmd: $(LIB_DIR)/inet.o $(SIM_MSG_OBJS) $(SIM_OBJS) 
	@mkdir -p $(BIN_DIR)
	$(LD) $(LDFLAGS) $(SIM_MSG_OBJS) $(SIM_OBJS) $(LIB_DIR)/inet.o $(LIBS_CMD) -o $@


#
# Build unit test drivers
#
test: tests_all

.PHONY: test

#
# Psuedotargets (required by make for some dependencies)
#
.PHONY: all all_clean clean default depclean gen_clean gui tests_clean
